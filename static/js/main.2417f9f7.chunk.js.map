{"version":3,"sources":["API/api.ts","utilities/constants.ts","utilities/prepareTodos.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","components/Button/Button.tsx","components/FilterButton/FilterButton.tsx","components/FilterButtons/FilterButtons.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","json","data","noUser","id","name","username","email","phone","website","createdAt","updatedAt","address","userId","street","suite","city","zipcode","buttons","title","callback","todos","sort","b","todo","localeCompare","Number","completed","user","prepareTodos","users","map","matchedUser","find","makeTodoList","TodoItem","content","type","checked","disabled","TodoList","props","todoItem","key","Button","onClick","FilterButton","FilterButtons","sortTodos","button","App","useState","todoList","setTodoList","isLoaded","setLoaded","isLoading","setLoading","then","ReactDOM","render","document","getElementById"],"mappings":"ySAGaA,EAAO,uCAAG,WAAUC,GAAV,mBAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,gBAEEA,EAASC,OAFX,uBAEbC,EAFa,EAEbA,KAFa,kBAIdA,GAJc,2CAAH,sDCYPC,EAAe,CAC1BC,GAAI,EACJC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,UAAW,GACXC,UAAW,GACXC,QApBgB,CAChBR,GAAI,EACJS,OAAQ,EACRC,OAAQ,GACRC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTP,UAAW,GACXC,UAAW,KAeAO,EAAyB,CACpC,CACEd,GAAI,EACJe,MAAO,gBACPC,SAAU,SAACC,GAGT,OAFAA,EAAMC,MAAK,SAACxB,EAAGyB,GAAJ,OAAUzB,EAAE0B,KAAKL,MAAMM,cAAcF,EAAEC,KAAKL,UAEhDE,IAGX,CACEjB,GAAI,EACJe,MAAO,oBACPC,SAAU,SAACC,GAGT,OAFAA,EAAMC,MAAK,SAACxB,EAAGyB,GAAJ,OAAUG,OAAO5B,EAAE0B,KAAKG,WAAaD,OAAOH,EAAEC,KAAKG,cAEvDN,IAGX,CACEjB,GAAI,EACJe,MAAO,eACPC,SAAU,SAACC,GAGT,OAFAA,EAAMC,MAAK,SAACxB,EAAGyB,GAAJ,OAAUzB,EAAE8B,KAAKvB,KAAKoB,cAAcF,EAAEK,KAAKvB,SAE/CgB,KChDAQ,EAAe,SAACR,EAAeS,GAC1C,OAAOT,EAAMU,KAAI,SAAAP,GACf,IAAMQ,EAAcF,EAAMG,MAAK,SAAAL,GAAI,OAAIA,EAAKxB,KAAOoB,EAAKX,WAAWV,EAEnE,MAAO,CACLqB,OACAI,KAAK,eAAMI,QAKJE,EAAY,uCAAG,8BAAApC,EAAA,sEACNF,EFfE,2CEcI,cACpBkC,EADoB,gBAENlC,EFjBE,2CEeI,cAEpByB,EAFoB,yBAInBQ,EAAaR,EAAOS,IAJD,2CAAH,qDCRZK,EAAsB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5BZ,EAAeY,EAAfZ,KAAMI,EAASQ,EAATR,KACNT,EAAqBK,EAArBL,MAAOQ,EAAcH,EAAdG,UACPtB,EAASuB,EAATvB,KAER,OACE,6BACE,2BAAOgC,KAAK,WAAWC,QAASX,EAAWY,UAAQ,IACnD,8BAAOpB,GACN,IACD,gCAASd,KCTFmC,EAAsB,SAAAC,GAAU,IACnCpB,EAAUoB,EAAVpB,MAER,OACE,6BAEIA,EAAMU,KACJ,SAAAW,GAAQ,OACN,kBAAC,EAAD,CAAUC,IAAKD,EAASlB,KAAKpB,GAAIgC,QAASM,SCTzCE,EAAoB,SAAC,GAA0B,IAAxBR,EAAuB,EAAvBA,QAASS,EAAc,EAAdA,QAC3C,OACE,4BAAQR,KAAK,SAASQ,QAASA,GAC5BT,ICHMU,EAA0B,SAAC,GAA0B,IAAxBV,EAAuB,EAAvBA,QAASS,EAAc,EAAdA,QACjD,OACE,4BAAQR,KAAK,SAASQ,QAAS,kBAAMA,MAClCT,ICDMW,EAA2B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACzC,OACE,oCAEI9B,EAAQa,KAAI,SAAAkB,GAAM,OAChB,kBAAC,EAAD,CACEN,IAAKM,EAAO7C,GACZgC,QAASa,EAAO9B,MAChB0B,QAAS,kBAAMG,EAAUC,EAAO7B,kBCgC7B8B,EAzCC,WAAO,IAAD,EACYC,mBAAyB,IADrC,mBACbC,EADa,KACHC,EADG,OAEUF,oBAAkB,GAF5B,mBAEbG,EAFa,KAEHC,EAFG,OAGYJ,oBAAkB,GAH9B,mBAGbK,EAHa,KAGFC,EAHE,KAkBpB,OACE,oCACE,qDAEEH,EACI,kBAAC,EAAD,CAAeN,UATR,SAAC5B,GAChBiC,EAAYjC,EAAS,YAAIgC,QAUjB,kBAAC,EAAD,CACEhB,QAASoB,EAAY,aAAe,OACpCX,QAtBK,WACfY,GAAW,GACXvB,IAAewB,MAAK,SAAArC,GAClBgC,EAAYhC,GACZkC,GAAU,GACVE,GAAW,SAsBTH,EACI,kBAAC,EAAD,CAAUjC,MAAO+B,IACjB,OCtCZO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2417f9f7.chunk.js","sourcesContent":["export const todosURL = 'https://mate.academy/students-api/todos';\nexport const usersUrl = 'https://mate.academy/students-api/users';\n\nexport const getData = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  return data;\n};\n","import {\n  User, SortButtons,\n} from '../interfaces';\n\nconst noAddress = {\n  id: 0,\n  userId: 0,\n  street: '',\n  suite: '',\n  city: '',\n  zipcode: '',\n  createdAt: '',\n  updatedAt: '',\n};\n\nexport const noUser: User = {\n  id: 0,\n  name: '',\n  username: '',\n  email: '',\n  phone: '',\n  website: '',\n  createdAt: '',\n  updatedAt: '',\n  address: noAddress,\n};\n\nexport const buttons: SortButtons[] = [\n  {\n    id: 1,\n    title: 'Sort by title',\n    callback: (todos) => {\n      todos.sort((a, b) => a.todo.title.localeCompare(b.todo.title));\n\n      return todos;\n    },\n  },\n  {\n    id: 2,\n    title: 'Sort by completed',\n    callback: (todos) => {\n      todos.sort((a, b) => Number(a.todo.completed) - Number(b.todo.completed));\n\n      return todos;\n    },\n  },\n  {\n    id: 3,\n    title: 'Sort by name',\n    callback: (todos) => {\n      todos.sort((a, b) => a.user.name.localeCompare(b.user.name));\n\n      return todos;\n    },\n  },\n];\n","import { Todo, User, PreparedTodo } from '../interfaces';\nimport { usersUrl, todosURL, getData } from '../API/api';\nimport { noUser } from './constants';\n\nexport const prepareTodos = (todos: Todo[], users: User[]): PreparedTodo[] => {\n  return todos.map(todo => {\n    const matchedUser = users.find(user => user.id === todo.userId) || noUser;\n\n    return {\n      todo,\n      user: { ...matchedUser },\n    };\n  });\n};\n\nexport const makeTodoList = async (): Promise<PreparedTodo[]> => {\n  const users = await getData<User>(usersUrl);\n  const todos = await getData<Todo>(todosURL);\n\n  return prepareTodos(todos, users);\n};\n","import React, { FC } from 'react';\nimport { PreparedTodo } from '../../interfaces';\n\ninterface Props {\n  content: PreparedTodo;\n}\n\nexport const TodoItem: FC<Props> = ({ content }) => {\n  const { todo, user } = content;\n  const { title, completed } = todo;\n  const { name } = user;\n\n  return (\n    <div>\n      <input type=\"checkbox\" checked={completed} disabled />\n      <span>{title}</span>\n      {' '}\n      <strong>{name}</strong>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { PreparedTodo } from '../../interfaces';\nimport { TodoItem } from '../Todo/Todo';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: FC<Props> = props => {\n  const { todos } = props;\n\n  return (\n    <div>\n      {\n        todos.map(\n          todoItem => (\n            <TodoItem key={todoItem.todo.id} content={todoItem} />\n          ),\n        )\n      }\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  content: string;\n  onClick: () => void;\n}\n\nexport const Button: FC<Props> = ({ content, onClick }) => {\n  return (\n    <button type=\"button\" onClick={onClick}>\n      {content}\n    </button>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  content: string;\n  onClick: () => void;\n}\n\nexport const FilterButton: FC<Props> = ({ content, onClick }) => {\n  return (\n    <button type=\"button\" onClick={() => onClick()}>\n      {content}\n    </button>\n  );\n};\n","import React, { FC } from 'react';\nimport { buttons } from '../../utilities/constants';\nimport { FilterButton } from '../FilterButton/FilterButton';\nimport { SortCallback } from '../../interfaces';\n\ninterface Props {\n  sortTodos: (callback: SortCallback) => void;\n}\n\nexport const FilterButtons: FC<Props> = ({ sortTodos }) => {\n  return (\n    <>\n      {\n        buttons.map(button => (\n          <FilterButton\n            key={button.id}\n            content={button.title}\n            onClick={() => sortTodos(button.callback)}\n          />\n        ))\n      }\n    </>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { makeTodoList } from './utilities/prepareTodos';\nimport { PreparedTodo, SortCallback } from './interfaces';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Button } from './components/Button/Button';\nimport { FilterButtons } from './components/FilterButtons/FilterButtons';\n\nconst App: FC = () => {\n  const [todoList, setTodoList] = useState<PreparedTodo[]>([]);\n  const [isLoaded, setLoaded] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const loadData = () => {\n    setLoading(true);\n    makeTodoList().then(todos => {\n      setTodoList(todos);\n      setLoaded(true);\n      setLoading(false);\n    });\n  };\n\n  const sortTodo = (callback: SortCallback) => {\n    setTodoList(callback([...todoList]));\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {\n        isLoaded\n          ? <FilterButtons sortTodos={sortTodo} />\n          : (\n            <Button\n              content={isLoading ? 'Loading...' : 'Load'}\n              onClick={loadData}\n            />\n          )\n      }\n      {\n        isLoaded\n          ? <TodoList todos={todoList} />\n          : null\n      }\n\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}